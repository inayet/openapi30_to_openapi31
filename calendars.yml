components:
  schemas:
    AppointmentCreateSchema:
      properties:
        address:
          description: Appointment Address
          example: Zoom
          type: string
        appointmentStatus:
          enum:
          - new
          - confirmed
          - cancelled
          - showed
          - noshow
          - invalid
          example: confirmed
          type: string
        assignedUserId:
          description: Assigned User Id
          example: 0007BWpSzSwfiuSl0tR2
          type: string
        calendarId:
          description: Calendar Id
          example: CVokAlI8fgw4WYWoCtQz
          type: string
        contactId:
          description: Contact Id
          example: 0007BWpSzSwfiuSl0tR2
          type: string
        endTime:
          description: End Time
          example: '2021-06-23T04:30:00+05:30'
          type: string
        ignoreDateRange:
          description: If set to true, the minimum scheduling notice and date range
            would be ignored
          example: false
          type: boolean
        locationId:
          description: Location Id
          example: C2QujeCh8ZnC7al2InWR
          type: string
        startTime:
          description: Start Time
          example: '2021-06-23T03:30:00+05:30'
          type: string
        title:
          description: Title
          example: Test Event
          type: string
        toNotify:
          description: If set to false, the automations will not run
          example: false
          type: boolean
      required:
      - calendarId
      - locationId
      - contactId
      - startTime
      type: object
    AppointmentEditSchema:
      properties:
        address:
          description: Appointment Address
          example: Zoom
          type: string
        appointmentStatus:
          enum:
          - new
          - confirmed
          - cancelled
          - showed
          - noshow
          - invalid
          example: confirmed
          type: string
        calendarId:
          description: Calendar Id
          example: CVokAlI8fgw4WYWoCtQz
          type: string
        endTime:
          description: End Time
          example: '2021-06-23T04:30:00+05:30'
          type: string
        ignoreDateRange:
          description: If set to true, the minimum scheduling notice and date range
            would be ignored
          example: false
          type: boolean
        startTime:
          description: Start Time
          example: '2021-06-23T03:30:00+05:30'
          type: string
        title:
          description: Title
          example: Test Event
          type: string
        toNotify:
          description: If set to false, the automations will not run
          example: false
          type: boolean
      type: object
    AppointmentSchemaResponse:
      properties:
        address:
          description: Appointment Address
          example: Zoom
          type: string
        appointmentStatus:
          enum:
          - new
          - confirmed
          - cancelled
          - showed
          - noshow
          - invalid
          example: confirmed
          type: string
        assignedUserId:
          description: Assigned User Id
          example: 0007BWpSzSwfiuSl0tR2
          type: string
        calendarId:
          description: Calendar Id
          example: CVokAlI8fgw4WYWoCtQz
          type: string
        contactId:
          description: Contact Id
          example: 0007BWpSzSwfiuSl0tR2
          type: string
        endTime:
          description: End Time
          example: '2021-06-23T04:30:00+05:30'
          type: string
        id:
          description: Id
          example: 0TkCdp9PfvLeWKYRRvIz
          type: string
        locationId:
          description: Location Id
          example: C2QujeCh8ZnC7al2InWR
          type: string
        startTime:
          description: Start Time
          example: '2021-06-23T03:30:00+05:30'
          type: string
        title:
          description: Title
          example: Test Event
          type: string
      required:
      - calendarId
      - locationId
      - contactId
      - id
      type: object
    Availability:
      properties:
        calendarId:
          type: object
        date:
          type: string
        deleted:
          type: boolean
        hours:
          items:
            $ref: '#/components/schemas/Hour'
          type: array
        id:
          type: string
      required:
      - id
      - calendarId
      - date
      - hours
      - deleted
      type: object
    BadRequestDTO:
      properties:
        message:
          example: Bad Request
          type: string
        statusCode:
          example: 400
          type: number
      type: object
    BlockSlotCreateSchema:
      properties:
        assignedUserId:
          description: Assigned User Id
          example: CVokAlI8fgw4WYWoCtQz
          type: string
        calendarId:
          description: Calendar Id
          example: CVokAlI8fgw4WYWoCtQz
          type: string
        endTime:
          description: End Time
          example: '2021-06-23T04:30:00+05:30'
          type: string
        locationId:
          description: Location Id
          example: C2QujeCh8ZnC7al2InWR
          type: string
        startTime:
          description: Start Time
          example: '2021-06-23T03:30:00+05:30'
          type: string
        title:
          description: Title
          example: Test Event
          type: string
      required:
      - locationId
      - startTime
      - endTime
      type: object
    BlockSlotEditSchema:
      properties:
        assignedUserId:
          description: Assigned User Id
          example: CVokAlI8fgw4WYWoCtQz
          type: string
        calendarId:
          description: Calendar Id
          example: CVokAlI8fgw4WYWoCtQz
          type: string
        endTime:
          description: End Time
          example: '2021-06-23T04:30:00+05:30'
          type: string
        startTime:
          description: Start Time
          example: '2021-06-23T03:30:00+05:30'
          type: string
        title:
          description: Title
          example: Test Event
          type: string
      type: object
    CalendarByIdSuccessfulResponseDto:
      properties:
        calendar:
          $ref: '#/components/schemas/CalendarSchema'
      required:
      - calendar
      type: object
    CalendarCreateSchema:
      properties:
        alertEmail:
          type: string
        allowCancellation:
          default: true
          type: boolean
        allowReschedule:
          default: true
          type: boolean
        appoinmentPerDay:
          type: number
        appoinmentPerSlot:
          default: 1
          type: number
        autoConfirm:
          default: true
          type: boolean
        calendarType:
          example: test1
          type: string
        description:
          example: this is used for testing
          type: string
        eventColor:
          default: '#039be5'
          type: string
        eventTitle:
          default: '{{contact.name}}'
          type: string
        eventType:
          default: RoundRobin_OptimizeForAvailability
          enum:
          - RoundRobin_OptimizeForAvailability
          - RoundRobin_OptimizeForEqualDistribution
          - Collective
          - Group
          type: string
        formId:
          type: string
        formSubmitRedirectURL:
          type: string
        formSubmitThanksMessage:
          type: string
        formSubmitType:
          default: ThankYouMessage
          enum:
          - RedirectURL
          - ThankYouMessage
          type: string
        googleInvitationEmails:
          default: false
          type: boolean
        groupId:
          description: Group Id
          example: BqTwX8QFwXzpegMve9EQ
          type: string
        locationId:
          example: ocQHyuzHvysMo5N5VsXc
          type: string
        meetingLocation:
          type: string
        name:
          example: test calendar
          type: string
        notes:
          type: string
        notifications:
          description: Calendar Notifications
          items:
            $ref: '#/components/schemas/CalendarNotification'
          type: array
        openHours:
          items:
            $ref: '#/components/schemas/OpenHour'
          type: array
        pixelId:
          type: string
        shouldAssignContactToTeamMember:
          type: boolean
        shouldSendAlertEmailsToAssignedMember:
          type: boolean
        shouldSkipAssigningContactForExisting:
          type: boolean
        slotBuffer:
          type: number
        slotDuration:
          default: 30
          type: number
        slotInterval:
          default: 30
          type: number
        slug:
          example: test1
          type: string
        stickyContact:
          type: boolean
        teamMembers:
          description: Team members
          items:
            $ref: '#/components/schemas/TeamMemeber'
          type: array
        widgetSlug:
          example: test1
          type: string
        widgetType:
          example: classic
          type: string
      required:
      - locationId
      - name
      type: object
    CalendarNotification:
      properties:
        selectedUsers:
          type: string
        shouldSendToContact:
          type: object
        shouldSendToSelectedUsers:
          type: object
        shouldSendToUser:
          type: object
        templateId:
          type: string
        type:
          type: string
      required:
      - type
      - shouldSendToContact
      - shouldSendToUser
      - shouldSendToSelectedUsers
      - selectedUsers
      - templateId
      type: object
    CalendarSchema:
      properties:
        description:
          example: this is used for testing
          type: string
        groupId:
          description: Group Id
          example: BqTwX8QFwXzpegMve9EQ
          type: string
        id:
          example: 0TkCdp9PfvLeWKYRRvIz
          type: string
        isActive:
          example: true
          type: boolean
        locationId:
          example: ocQHyuzHvysMo5N5VsXc
          type: string
        name:
          example: test calendar
          type: string
        openHours:
          example: []
          items:
            type: string
          type: array
        slug:
          example: test1
          type: string
      required:
      - id
      - locationId
      - name
      type: object
    CalendarUpdateSchema:
      properties:
        alertEmail:
          type: string
        allowCancellation:
          type: boolean
        allowReschedule:
          type: boolean
        appoinmentPerDay:
          type: number
        appoinmentPerSlot:
          type: number
        autoConfirm:
          type: boolean
        availabilities:
          items:
            $ref: '#/components/schemas/Availability'
          type: array
        availabilityType:
          example: 0
          type: number
        calendarType:
          example: test1
          type: string
        description:
          example: this is used for testing
          type: string
        enableRecurring:
          type: boolean
        eventColor:
          type: string
        eventTitle:
          type: string
        eventType:
          enum:
          - RoundRobin_OptimizeForAvailability
          - RoundRobin_OptimizeForEqualDistribution
          - Collective
          - Group
          type: string
        formId:
          type: string
        formSubmitRedirectURL:
          type: string
        formSubmitThanksMessage:
          type: string
        formSubmitType:
          default: ThankYouMessage
          enum:
          - RedirectURL
          - ThankYouMessage
          type: string
        googleInvitationEmails:
          type: boolean
        groupId:
          description: Group Id
          example: BqTwX8QFwXzpegMve9EQ
          type: string
        isLivePaymentMode:
          type: boolean
        meetingLocation:
          type: string
        name:
          example: test calendar
          type: string
        notes:
          type: string
        notifications:
          description: Calendar Notifications
          items:
            $ref: '#/components/schemas/CalendarNotification'
          type: array
        openHours:
          items:
            $ref: '#/components/schemas/OpenHour'
          type: array
        pixelId:
          type: string
        recurring:
          $ref: '#/components/schemas/Recurring'
        shouldAssignContactToTeamMember:
          type: boolean
        shouldSendAlertEmailsToAssignedMember:
          type: boolean
        shouldSkipAssigningContactForExisting:
          type: boolean
        slotBuffer:
          type: number
        slotDuration:
          type: number
        slotInterval:
          type: object
        slug:
          example: test1
          type: string
        stickyContact:
          type: boolean
        teamMembers:
          description: Team members
          items:
            $ref: '#/components/schemas/TeamMemeber'
          type: array
        widgetSlug:
          example: test1
          type: string
        widgetType:
          example: classic
          type: string
      type: object
    CalendarsGetSuccessfulResponseDto:
      properties:
        calendars:
          items:
            $ref: '#/components/schemas/CalendarSchema'
          type: array
      type: object
    CreateBookedSlotSuccessfulResponseDto:
      properties:
        assignedUserId:
          description: Assigned User Id
          example: 0007BWpSzSwfiuSl0tR2
          type: string
        calendarId:
          description: Calendar id
          example: CVokAlI8fgw4WYWoCtQz
          type: string
        endTime:
          description: End Time
          example: '2021-06-23T04:30:00+05:30'
          type: string
        id:
          description: Id
          example: 0TkCdp9PfvLeWKYRRvIz
          type: string
        locationId:
          description: Location Id
          example: C2QujeCh8ZnC7al2InWR
          type: string
        startTime:
          description: Start Time
          example: '2021-06-23T03:30:00+05:30'
          type: string
        title:
          description: Title
          example: My event
          type: string
      required:
      - id
      - locationId
      - title
      - startTime
      - endTime
      type: object
    DeleteAppointmentSchema:
      properties: {}
      type: object
    DeleteEventSuccessfulResponseDto:
      properties:
        succeded:
          example: true
          type: boolean
      type: object
    GetSlotsSuccessfulResponseDto:
      properties:
        _dates_:
          $ref: '#/components/schemas/SlotsSchema'
      required:
      - _dates_
      type: object
    Hour:
      properties:
        closeHour:
          maximum: 23
          minimum: 0
          type: number
        closeMinute:
          maximum: 60
          minimum: 0
          type: number
        openHour:
          maximum: 23
          minimum: 0
          type: number
        openMinute:
          maximum: 60
          minimum: 0
          type: number
      required:
      - openHour
      - openMinute
      - closeHour
      - closeMinute
      type: object
    OpenHour:
      properties:
        daysOfTheWeek:
          items:
            maximum: 6
            minimum: 0
            type: number
          type: array
        hours:
          items:
            $ref: '#/components/schemas/Hour'
          type: array
      required:
      - daysOfTheWeek
      - hours
      type: object
    Recurring:
      properties: {}
      type: object
    SlotsSchema:
      properties:
        slots:
          items:
            type: string
          type: array
      required:
      - slots
      type: object
    TeamMemeber:
      properties:
        meetingLocation:
          type: string
        priority:
          default: 0.5
          enum:
          - 0
          - 0.5
          - 1
          type: number
        userId:
          example: ocQHyuzHvysMo5N5VsXc
          type: string
      required:
      - userId
      type: object
    UnauthorizedDTO:
      properties:
        error:
          example: Unauthorized
          type: string
        message:
          example: 'Invalid token: access token is invalid'
          type: string
        statusCode:
          example: 401
          type: number
      type: object
  securitySchemes: {}
info:
  contact: {}
  description: Documentation for Calendars API
  title: Calendars API
  version: '1.0'
openapi: 3.1.0
paths:
  /calendars/:
    get:
      description: Get all calendars in a location.
      operationId: get-calendars
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        schema:
          example: Access Token
          type: string
      - description: Api Version
        in: header
        name: Version
        required: true
        schema:
          example: '2021-04-15'
          type: string
      - description: Location Id
        example: ve9EPM428h8vShlRW1KT
        in: query
        name: locationId
        required: true
        schema:
          type: string
      - description: Group Id
        example: BqTwX8QFwXzpegMve9EQ
        in: query
        name: groupId
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarsGetSuccessfulResponseDto'
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDTO'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedDTO'
          description: Unauthorized
      summary: Get Calendars
      tags:
      - Calendars
      x-original-description: Get all calendars in a location.
      x-original-operationId: get-calendars
    post:
      description: Create calendar in a location.
      operationId: create-calendar
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        schema:
          example: Access Token
          type: string
      - description: Api Version
        in: header
        name: Version
        required: true
        schema:
          example: '2021-04-15'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarCreateSchema'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarByIdSuccessfulResponseDto'
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDTO'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedDTO'
          description: Unauthorized
      summary: Create Calendar
      tags:
      - Calendars
      x-original-description: Create calendar in a location.
      x-original-operationId: create-calendar
  /calendars/events/appointments:
    post:
      description: Create appointment
      operationId: create-appointment
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        schema:
          example: Access Token
          type: string
      - description: Api Version
        in: header
        name: Version
        required: true
        schema:
          example: '2021-04-15'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentCreateSchema'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentSchemaResponse'
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDTO'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedDTO'
          description: Unauthorized
      summary: Create Appointment
      tags:
      - Calendar Events
      x-original-description: Create appointment
      x-original-operationId: create-appointment
  /calendars/events/appointments/{eventId}:
    get:
      description: Get appointment by ID
      operationId: get-appointment
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        schema:
          example: Access Token
          type: string
      - description: Api Version
        in: header
        name: Version
        required: true
        schema:
          example: '2021-04-15'
          type: string
      - description: Event Id
        example: ocQHyuzHvysMo5N5VsXc
        in: path
        name: eventId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentSchemaResponse'
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDTO'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedDTO'
          description: Unauthorized
      summary: Get Appointment
      tags:
      - Calendar Events
      x-original-description: Get appointment by ID
      x-original-operationId: get-appointment
    put:
      description: Edit appointment by ID
      operationId: edit-appointment
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        schema:
          example: Access Token
          type: string
      - description: Api Version
        in: header
        name: Version
        required: true
        schema:
          example: '2021-04-15'
          type: string
      - description: Event Id
        example: ocQHyuzHvysMo5N5VsXc
        in: path
        name: eventId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentEditSchema'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentSchemaResponse'
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDTO'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedDTO'
          description: Unauthorized
      summary: Edit Appointment
      tags:
      - Calendar Events
      x-original-description: Edit appointment by ID
      x-original-operationId: edit-appointment
  /calendars/events/block-slots:
    post:
      description: Create block slot
      operationId: create-block-slot
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        schema:
          example: Access Token
          type: string
      - description: Api Version
        in: header
        name: Version
        required: true
        schema:
          example: '2021-04-15'
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockSlotCreateSchema'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBookedSlotSuccessfulResponseDto'
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDTO'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedDTO'
          description: Unauthorized
      summary: Create Block Slot
      tags:
      - Calendar Events
      x-original-description: Create block slot
      x-original-operationId: create-block-slot
  /calendars/events/block-slots/{eventId}:
    put:
      description: Edit block slot by ID
      operationId: edit-block-slot
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        schema:
          example: Access Token
          type: string
      - description: Api Version
        in: header
        name: Version
        required: true
        schema:
          example: '2021-04-15'
          type: string
      - description: Event Id
        example: ocQHyuzHvysMo5N5VsXc
        in: path
        name: eventId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockSlotEditSchema'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBookedSlotSuccessfulResponseDto'
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDTO'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedDTO'
          description: Unauthorized
      summary: Edit Block Slot
      tags:
      - Calendar Events
      x-original-description: Edit block slot by ID
      x-original-operationId: edit-block-slot
  /calendars/events/{eventId}:
    delete:
      description: Delete event by ID
      operationId: delete-event
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        schema:
          example: Access Token
          type: string
      - description: Api Version
        in: header
        name: Version
        required: true
        schema:
          example: '2021-04-15'
          type: string
      - description: Event Id
        example: ocQHyuzHvysMo5N5VsXc
        in: path
        name: eventId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAppointmentSchema'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteEventSuccessfulResponseDto'
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDTO'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedDTO'
          description: Unauthorized
      summary: Delete Event
      tags:
      - Calendar Events
      x-original-description: Delete event by ID
      x-original-operationId: delete-event
  /calendars/{calendarId}:
    delete:
      description: Delete calendar by ID
      operationId: delete-calendar
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        schema:
          example: Access Token
          type: string
      - description: Api Version
        in: header
        name: Version
        required: true
        schema:
          example: '2021-04-15'
          type: string
      - description: Calendar Id
        example: ocQHyuzHvysMo5N5VsXc
        in: path
        name: calendarId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarByIdSuccessfulResponseDto'
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDTO'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedDTO'
          description: Unauthorized
      summary: Delete Calendar
      tags:
      - Calendars
      x-original-description: Delete calendar by ID
      x-original-operationId: delete-calendar
    get:
      description: Get calendar by ID
      operationId: get-calendar
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        schema:
          example: Access Token
          type: string
      - description: Api Version
        in: header
        name: Version
        required: true
        schema:
          example: '2021-04-15'
          type: string
      - description: Calendar Id
        example: ocQHyuzHvysMo5N5VsXc
        in: path
        name: calendarId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarByIdSuccessfulResponseDto'
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDTO'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedDTO'
          description: Unauthorized
      summary: Get Calendar
      tags:
      - Calendars
      x-original-description: Get calendar by ID
      x-original-operationId: get-calendar
    put:
      description: Update calendar by ID.
      operationId: update-calendar
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        schema:
          example: Access Token
          type: string
      - description: Api Version
        in: header
        name: Version
        required: true
        schema:
          example: '2021-04-15'
          type: string
      - description: Calendar Id
        example: ocQHyuzHvysMo5N5VsXc
        in: path
        name: calendarId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarUpdateSchema'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarByIdSuccessfulResponseDto'
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDTO'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedDTO'
          description: Unauthorized
      summary: Update Calendar
      tags:
      - Calendars
      x-original-description: Update calendar by ID.
      x-original-operationId: update-calendar
  /calendars/{calendarId}/free-slots:
    get:
      description: Get free slots for a calendar between a date range. Optionally
        a consumer can also request free slots in a particular timezone and also for
        a particular user.
      operationId: get-slots
      parameters:
      - description: Access Token
        in: header
        name: Authorization
        required: true
        schema:
          example: Access Token
          type: string
      - description: Api Version
        in: header
        name: Version
        required: true
        schema:
          example: '2021-04-15'
          type: string
      - description: Calendar Id
        example: ocQHyuzHvysMo5N5VsXc
        in: path
        name: calendarId
        required: true
        schema:
          type: string
      - description: Start Date
        example: '1548898600000'
        in: query
        name: startDate
        required: true
        schema:
          type: string
      - description: End Date
        example: '1601490599999'
        in: query
        name: endDate
        required: true
        schema:
          type: string
      - description: The timezone in which the free slots are returned
        example: America/Chihuahua
        in: query
        name: timezone
        required: false
        schema:
          type: string
      - description: The user for whom the free slots are returned
        example: 082goXVW3lIExEQPOnd3
        in: query
        name: userId
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSlotsSuccessfulResponseDto'
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestDTO'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedDTO'
          description: Unauthorized
      summary: Get Free Slots
      tags:
      - Calendars
      x-original-description: Get free slots for a calendar between a date range.
        Optionally a consumer can also request free slots in a particular timezone
        and also for a particular user.
      x-original-operationId: get-slots
servers:
- url: https://services.leadconnectorhq.com
tags:
- description: Documentation for Calendars API
  name: Calendars
